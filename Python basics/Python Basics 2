//  (is VS == operator) Exercise

The 'is' keyword is used to test if two variables refer to the same object.
The test returns True if the two objects are the same object.
The test returns False if they are not the same object, even if the two objects are 100% equal.

Use the == operator to test if two variables are equal.

print ( True == 1 )
print ( [] == 1 )
print ( '' == 1 )
print ( 10 == 10.0 )
print ( [] == [] )
print ( [1,2,3] is [1,2,3] )

OUT: True
OUT: False
OUT: False
OUT: True
OUT: True
OUT: True

print ( True is 1 )
print ( [] is 1 )
print ( '' is 1 )
print ( 10 is 10.0 )
print ( [] is [] )
print ( True is True )
print ( 1 is 1 )
print ( '1' is '1' )
print ( [1,2,3] is [1,2,3] )


x = [1,2,3]
y = [1,2,3]
print(x is y)                OUT: False

x = [1,2,3]
y = x
print(x is y)                OUT: True

OUT: False
OUT: False
OUT: False
OUT: False
OUT: False
OUT: True
OUT: True
OUT: True
OUT: False


//# Printing total sum of the list

my_list = [1,2,3,4,5,6,7,8,9,10]
counter = 0         # A counter should be outside the loop 
for item in my_list :
  counter = counter + item  
print (counter)    # Mind the indentation 

#out : 55


//#print index of number 50?

for x,y in enumerate(list(range(100))): 
  if y == 50:
    print(f'index of 50 is : {x}')
    
    
//GUI EXERCISE

#Display the image below to the right hand side where the 0 is going to be ' ', and the 1 is going to be '*'. This will reveal an image!
picture = [
  [0,0,0,1,0,0,0],
  [0,0,1,1,1,0,0],
  [0,1,1,1,1,1,0],
  [1,1,1,1,1,1,1],
  [0,0,0,1,0,0,0],
  [0,0,0,1,0,0,0]
]

#solution:

for row in picture :
  for pixel in row:
    if pixel == 1 :
      print ('*', end='')
    else :
      print (' ', end='')
  print ('')                             #need a new line after every row
  

#end parameter in print()
By default python’s print() function ends with a newline. A programmer with C/C++ background may wonder how to print without newline.

Python’s print() function comes with a parameter called ‘end’. By default, the value of this parameter is ‘\n’, i.e. the new line character.
You can end a print statement with any character/string using this parameter.


//FIND DUBLICATES IN A LIST AND PRINT THEM ONCE IN  NEW LIST USING LOOPS

some_list = ['a', 'b', 'c', 'b', 'd', 'm', 'n', 'n']

#ANSWER
new_list = []
for value in some_list:
    if some_list.count(value) > 1:
        if value not in new_list:
            new_list.append(value)

print(duplicates)


//RETURN

#The return keyword is to exit a function and return a value.

#EXAMPLE:
def sum(num1, num2):
  return (num1 + num2)

print(sum(2,3))       OUT: 5


def sum(num1, num2):
  result = num1 + num2
  print (f'sum is : {result}')

(sum(2,3))              OUT: sum is : 5         #WITHOUT USING RETURN#


#Statements after the return line will not be executed:

#EXAMPLE:
def sum(num1, num2):
  return (num1 + num2)
  print('xyz')          # THIS PRINT WON'T GET EXECUTED               

print(sum(2,3))        OUT: 5


#NESTED FUNCTIONS

#EXAMPLE:
def sum (num1, num2):
  def another_function (n1,n2):
    return n1 + n2

print(sum(5,10))       OUT: None


def sum (num1, num2):
  def another_function (n1,n2):
    return n1 + n2
  return another_function 

total = sum (5,10)
print(total(5,10))         OUT: 15

# OR

def sum (num1, num2):
  def another_function (n1,n2):
    return n1 + n2
  return another_function (num1, num2)

total = sum (5,10)
print(total)              OUT: 15


//EXERCISE

# age = input("What is your age?: ")

# if int(age) < 18:
# 	print("Sorry, you are too young to drive this car. Powering off")
# elif int(age) > 18:
# 	print("Powering On. Enjoy the ride!");
# elif int(age) == 18:
# 	print("Congratulations on your first year of driving. Enjoy the ride!")

#1. Wrap the above code in a function called checkDriverAge(). Whenever you call this function, you will get prompted for age. 
# Notice the benefit in having checkDriverAge() instead of copying and pasting the function everytime?

def checkDriverAge() :
  age = input("What is your age?: ")
  if int(age) < 18:
    print("Sorry, you are too young to drive this car. Powering off")
  elif int(age) > 18:
    print("Powering On. Enjoy the ride!")
  elif int(age) == 18:
    print("Congratulations on your first year of driving. Enjoy the ride!")

checkDriverAge()



#2 Instead of using the input(). Now, make the checkDriverAge() function accept an argument of age, so that if you enter:
#checkDriverAge(92);
#it returns "Powering On. Enjoy the ride!"

def checkDriverAge(age) :
  if int(age) < 18:
    print("Sorry, you are too young to drive this car. Powering off")
  elif int(age) > 18:
    print("Powering On. Enjoy the ride!")
  elif int(age) == 18:
    print("Congratulations on your first year of driving. Enjoy the ride!")


checkDriverAge(92)


#also make it so that the default age is set to 0 if no argument is given.

def checkDriverAge(age = 0) :
  if int(age) < 18:
    print("Sorry, you are too young to drive this car. Powering off")
  elif int(age) > 18:
    print("Powering On. Enjoy the ride!")
  elif int(age) == 18:
    print("Congratulations on your first year of driving. Enjoy the ride!")

checkDriverAge()


//*args and **kwargs

example:
def super_func (a):
  print (sum(a))

super_func(1,2,3,4,5)            #OUT: error takes 1 argument but 5 were given


#to solve this we use *args

def super_func (*a):
  return (sum(a))                 

print (super_func(1,2,3,4,5))     #OUT: 15 

#OR

def super_func (*a):
  print (sum(a))

super_func(1,2,3,4,5)             #OUT: 15


def super_func (*a):
  print (a)                  #returns a TUPLE
  print (sum(a))

super_func(1,2,3,4,5)       #OUT: (1,2,3,4,5)
                                  15
                                  

def super_func (*a, **b):
  print(b)                    #returns a dict
  total = 0
  for x in b.values():
    total += x
  print (sum(a) + total)

super_func(1,2,3,4,5,num1=5,num2=10)      #OUT:30


//EXERCISE #print max even number from the list

[2,3,1,4,5,6,10,9,6]

def highest_even (a):
  even = []
  for x in a:
    if x % 2 ==0:
      even.append(x)
  return max (even)
print (highest_even([2,3,1,4,5,6,10,9,6]))


//#WALRUS OPERATOR

a = 'helloooooooooo'

if ((n := len(a)) > 10):
    print(f"too long {n} elements")

while ((n := len(a)) > 1):
    print(n)
    a = a[:-1]

print(a)

OUT: 14,13,12,...........,2,h


//NONLOCAL KEYWORD

# Scope - what variables do I have access to?

def outer():
    x = "local"
    def inner():
        nonlocal x
        x = "nonlocal"
        print("inner:", x)         OUT: inner: nonlocal
    inner()
    print("outer:", x)             OUT: outer: nonlocal       #modified
outer()

#1 - start with local
#2 - Parent local?
#3 - global
#4 - built in python functions


def outer():
    x = "local"
    def inner():
        
        x = "nonlocal"
        print("inner:", x)         OUT: inner: nonlocal
    inner()
    print("outer:", x)             OUT: outer: local           #NOT modified
outer()
print (x)    # OUT: name 'x' is not defined   ##as we are done with the outer(), python automatially removes or empties the bookshelf assigned for 'x variable'
              so that other programs can use that memory shelf##


//























































































































































